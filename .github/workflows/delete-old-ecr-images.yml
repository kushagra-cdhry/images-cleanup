name: Delete Old ECR Images

on:
  schedule:
    - cron: '0 0 * * 0' # Runs every Sunday at midnight UTC
  workflow_dispatch:

jobs:
  delete-old-images:
    runs-on: ubuntu-latest

    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: List ECR Repositories
        id: list_repositories
        run: |
          echo "Fetching repositories from ECR..."
          repositories=$(aws ecr describe-repositories --query 'repositories[*].repositoryName' --output text)
          echo "$repositories" > repositories.txt
          echo "Repositories fetched: $repositories"

      - name: Delete Old Images
        run: |
          # Number of images to retain per repository
          keep=5

          # Read repositories from the file
          echo "Reading repositories from repositories.txt..."
          repositories=$(<repositories.txt)

          for repo in $repositories; do
              echo "Processing repository: $repo"

              # Fetch image tags and push dates for the repository
              images=$(aws ecr describe-images --repository-name $repo \
                      --query 'imageDetails[*].[imageTags[0], imagePushedAt]' \
                      --output text | sort -k2 -r)
              
              echo "Images fetched for $repo: $images"

              # Skip if no images are found
              if [ -z "$images" ]; then
                  echo "No images found in $repo. Skipping."
                  continue
              fi

              # Clear previous data for each repo
              unset image_dates
              declare -A image_dates

              # Populate associative array with image tags and push dates
              while read -r tag pushed_at; do
                  image_dates["$tag"]="$pushed_at"
              done <<< "$images"

              # Sort images by push dates (most recent first)
              sorted_tags=($(for tag in "${!image_dates[@]}"; do 
                                echo "$tag ${image_dates[$tag]}"; 
                             done | sort -k2 -r | awk '{print $1}'))
              
              echo "Sorted images for $repo: ${sorted_tags[*]}"

              # Check if we have more images than we need to keep
              if (( ${#sorted_tags[@]} > keep )); then
                  # Find old images to delete
                  images_to_delete=("${sorted_tags[@]:keep}")
                  echo "Deleting old images from $repo: ${images_to_delete[*]}"

                  # Delete each old image
                  for image in "${images_to_delete[@]}"; do
                      echo "Deleting image: $image from $repo"
                      aws ecr batch-delete-image --repository-name $repo --image-ids imageTag=$image
                      echo "Deleted image: $image from $repo"
                  done
              else
                  echo "No old images to delete. Keeping all ${#sorted_tags[@]} images."
              fi
          done
