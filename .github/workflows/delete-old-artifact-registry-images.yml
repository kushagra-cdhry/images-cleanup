name: GCP Image Management

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  manage-images:
    runs-on: ubuntu-latest  

    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}  
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1 
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} 
      
      - name: Run GCP image management script
        run: |
          #!/bin/bash
          PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          LOCATION="us-east1"
          MAX_VERSIONS=15

          declare -A REPOSITORIES

          while IFS= read -r REPO_INFO; do
              REPO_NAME=$(echo "$REPO_INFO" | awk '{print $1}')
              REPO_UPDATE_TIME=$(echo "$REPO_INFO" | awk '{print $2}')
              REPOSITORIES["$REPO_NAME"]="$REPO_UPDATE_TIME"
          done < <(gcloud artifacts repositories list --location=$LOCATION --format="value(name, updateTime)" | sort -k2,2r)

          echo "Repositories:"
          for REPO_NAME in $(for key in "${!REPOSITORIES[@]}"; do echo "$key ${REPOSITORIES[$key]}"; done | sort -k2,2r | awk '{print $1}'); do
              echo "Processing Repository: $REPO_NAME"

              declare -A PACKAGES

              while IFS= read -r PACKAGE_INFO; do
                  PACKAGE_NAME=$(echo "$PACKAGE_INFO" | awk '{print $1}')
                  PACKAGE_UPDATE_TIME=$(echo "$PACKAGE_INFO" | awk '{print $2}')
                  PACKAGES["$PACKAGE_NAME"]="$PACKAGE_UPDATE_TIME"
              done < <(gcloud artifacts packages list --location=$LOCATION --repository=$REPO_NAME --format="value(name, updateTime)" | sort -k2,2r)

              echo "  Packages:"
              for PACKAGE_NAME in $(for key in "${!PACKAGES[@]}"; do echo "$key ${PACKAGES[$key]}"; done | sort -k2,2r | awk '{print $1}'); do
                  echo "  Processing Package: $PACKAGE_NAME"

                  declare -A VERSIONS
                  while IFS= read -r VERSION_INFO; do
                      VERSION_NAME=$(echo "$VERSION_INFO" | awk '{print $1}')
                      VERSION_UPDATE_TIME=$(echo "$VERSION_INFO" | awk '{print $2}')
                      VERSIONS["$VERSION_NAME"]="$VERSION_UPDATE_TIME"
                  done < <(gcloud artifacts versions list --location=$LOCATION --repository=$REPO_NAME --package="$PACKAGE_NAME" --format="value(name, updateTime)" | sort -k2,2r)

                  echo "    Versions:"
                  VERSION_COUNT=${#VERSIONS[@]}

                  if (( VERSION_COUNT > MAX_VERSIONS )); then
                      echo "$VERSION_COUNT versions found, deleting extra versions..."
                      VERSIONS_TO_DELETE=$(( VERSION_COUNT - MAX_VERSIONS ))

                      for VERSION_NAME in $(for key in "${!VERSIONS[@]}"; do echo "$key ${VERSIONS[$key]}"; done | sort -k2,2 | awk '{print $1}' | head -n "$VERSIONS_TO_DELETE"); do
                          echo "      Deleting Version: $VERSION_NAME"
                          gcloud artifacts versions delete "$VERSION_NAME" --location=$LOCATION --repository=$REPO_NAME --package="$PACKAGE_NAME" --delete-tags --quiet
                      done
                  else
                      echo "No versions to delete, $VERSION_COUNT versions found."
                  fi

                  unset VERSIONS
              done
              unset PACKAGES
          done
          unset REPOSITORIES
