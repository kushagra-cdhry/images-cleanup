name: GCP Image Management

on:
  workflow_dispatch:  # Manual dispatch
  schedule:
    - cron: '0 0 * * 0'  # Har Sunday ko raat 12 baje chalega (UTC time)

jobs:
  manage-images:
    runs-on: ubuntu-latest  # Workflow kis environment pe chalega

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2  # Repository ko checkout karega

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}  # GCP project ID ko GitHub Secrets se fetch karega
          install_components: 'beta'  # Optional: Agar aapko beta components chahiye
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1  # Updated to latest version
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}  # Service account key ko GitHub Secrets se fetch karega

      - name: Run GCP image management script
        run: |
          #!/bin/bash
          PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"  # GitHub Secrets se project ID
          KEEP=10
          LOCATIONS=($(echo "${{ secrets.GCP_LOCATIONS }}" | tr ',' ' '))  

          for LOCATION in "${LOCATIONS[@]}"; do
              REPOS=$(gcloud artifacts repositories list --project="$PROJECT_ID" \
                      --location="$LOCATION" --format="value(name)" --quiet 2>/dev/null)

              if [ $? -ne 0 ]; then
                  echo "Error: Unable to list repositories for location $LOCATION."
                  continue
              fi

              if [ -n "$REPOS" ]; then
                  echo "Repositories Found in $LOCATION:"
                  echo "$REPOS" | while read -r REPO; do
                      echo "  - $REPO"
                      IMAGE_PATH="$LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO"

                      IMAGES=$(gcloud artifacts docker images list "$IMAGE_PATH" \
                              --format="value(IMAGE, updateTime)" | sort -k2 -r)

                      if [ $? -eq 0 ] && [ -n "$IMAGES" ]; then
                          echo "    Images found in $REPO:"
                          IMAGE_ARRAY=()
                          while read -r IMAGE UPDATE_TIME; do
                              IMAGE_NAME=$(basename "$IMAGE")
                              if [[ ! " ${IMAGE_ARRAY[@]} " =~ " ${IMAGE_NAME} " ]]; then
                                  IMAGE_ARRAY+=("$IMAGE_NAME")
                              fi
                          done <<< "$IMAGES"

                          IMAGE_COUNT=${#IMAGE_ARRAY[@]}
                          echo "    Unique images found: $IMAGE_COUNT"

                          if [ "$IMAGE_COUNT" -gt "$KEEP" ]; then
                              IMAGES_TO_DELETE=("${IMAGE_ARRAY[@]:$KEEP}")
                              IMAGE_ARRAY=("${IMAGE_ARRAY[@]:0:$KEEP}")

                              echo "      Retained Images:"
                              for IMAGE_NAME in "${IMAGE_ARRAY[@]}"; do
                                  echo "      - $IMAGE_NAME"
                              done

                              echo "      Images to be deleted:"
                              for IMAGE_NAME in "${IMAGES_TO_DELETE[@]}"; do
                                  echo "      - $IMAGE_NAME"
                              done

                              for IMAGE_NAME in "${IMAGES_TO_DELETE[@]}"; do
                                  echo "      Deleting $IMAGE_NAME..."
                                  gcloud artifacts docker images delete "$IMAGE_PATH/$IMAGE_NAME" --quiet
                              done
                          else
                              echo "    No images to delete. Found $IMAGE_COUNT unique images:"
                              for IMAGE_NAME in "${IMAGE_ARRAY[@]}"; do
                                  echo "      - $IMAGE_NAME"
                              done
                          fi
                      else
                          echo "    No images found in $REPO."
                      fi
                  done
              else
                  echo "    No repositories found in $LOCATION."
              fi
          done
